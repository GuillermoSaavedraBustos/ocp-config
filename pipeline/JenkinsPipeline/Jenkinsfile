// Here it shall be
node('maven') {

  def mvnCmd = "mvn -s ./nexus-openshift-settings.xml -B"

  stage('Checkout Source') {
    echo "Checkout Source"
    git 'https://github.com/hsavolai/ose-wall-service.git'
  }

  // Extract version and other properties from the pom.xml
  def groupId    = getGroupIdFromPom("pom.xml")
  def artifactId = getArtifactIdFromPom("pom.xml")
  def artifactVersion    = ""

  def buildNumber = sh (
    script: "git rev-list --all --count",
    returnStdout: true
  ).trim()

  stage('Define version') {
    sh "${mvnCmd} clean build-helper:parse-version versions:set '-DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-${buildNumber}_$BUILD_NUMBER'"
    artifactVersion = getVersionFromPom("pom.xml")
    echo "The final artifact version is ${artifactVersion}"
  }

  stage('Unit Tests') {
    echo "Run unit tests"
    sh "${mvnCmd} -P test clean test"
  }
  
  stage('Code Analysis') {
    echo "Code analysis"
    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000/ -Dsonar.projectName=${JOB_BASE_NAME}"
  }
  
   stage('Publish to Nexus') {
     echo "Publish to Nexus"
     sh "${mvnCmd} -P release clean deploy -DskipTests=true -Dpackaging=jar -DrepositoryId=nexus -DaltDeploymentRepository=nexus::default::http://nexus3:8081/repository/maven-releases"
   }
  
   def GET_BUILD_OUTPUT = sh (
      script: "oc get all -l build=ose-wall-service",
      returnStdout: true
   ).trim()
      
   stage('Build OpenShift Image') { 
    sh "oc project my-dev-project"

  
    echo "Get build output: ${GET_BUILD_OUTPUT}"
    
    if (GET_BUILD_OUTPUT.contains("No resources found.")){
      sh "oc new-build --binary=true --name=ose-wall-service -i=redhat-openjdk18-openshift"
    }
    
    sh "oc start-build ose-wall-service --from-file=http://nexus3:8081/repository/maven-releases/org/savolainen/ose-wall-service/${artifactVersion}/ose-wall-service-${artifactVersion}.jar"
    openshiftVerifyBuild bldCfg: 'ose-wall-service', checkForTriggeredDeployments: 'false', namespace: 'my-dev-project', verbose: 'false', waitTime: ''
    sh "oc tag my-dev-projct/ose-wall-service:latest my-dev-projct/ose-wall-service:${artifactVersion}"
   }

   def GET_DC_OUTPUT = sh (
      script: "oc get dc/ose-wall-service",
      returnStdout: true
    ).trim()

   stage ('Deploy DEV') {
    sh "oc project my-dev-project"
    
    if (GET_DC_OUTPUT.contains("not found")){
      sh "oc new-app my-dev-projct/ose-wall-service:${artifactVersion}"
      sh "oc expose svc/ose-wall-service --port=8080"
    } 

   }
 
   stage ('Deploy QA') {
     timeout(time:5, unit:'MINUTES') {
       input message: "Promote to QA?", ok: "Promote"
     }
     //sh "oc tag my-dev-projct/ose-wall-service:latest my-qa-projct/ose-wall-service:${artifactVersion}"
 
   }

}

//node('nodejs') {
//  sh "ls" 
//}

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}

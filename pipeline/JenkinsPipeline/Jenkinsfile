// Here it shall be
node('maven') {

  def mvnCmd = "mvn -s ./nexus-openshift-settings.xml -B"

  stage('Checkout Source') {
    echo "Checkout Source"
    git 'https://github.com/hsavolai/ose-wall-service.git'
  }

  // Extract version and other properties from the pom.xml
  def groupId    = getGroupIdFromPom("pom.xml")
  def artifactId = getArtifactIdFromPom("pom.xml")
  def artifactVersion    = ""

  def buildNumber = sh (
    script: "git rev-list --all --count",
    returnStdout: true
  ).trim()

  def unixTime = sh (
    script: 'date +"%s"',
    returnStdout: true
   ).trim()

  stage('Define version') {
    sh "${mvnCmd} clean build-helper:parse-version versions:set '-DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-${buildNumber}_${unixTime}'"
    artifactVersion = getVersionFromPom("pom.xml")
    echo "The final artifact version is ${artifactVersion}"
  }

 stage('Test and Analysis') {

  parallel (
   'Unit Test': {
    echo "Run unit tests"
    sh "${mvnCmd} -P test clean test"
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
    },
   'Static Analysis': {
    echo "Code analysis"
     sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000/ -Dsonar.projectName=${JOB_BASE_NAME} -DskipTests=true"
    }
    )
   }
  
   stage('Publish to Nexus') {
     echo "Publish to Nexus"
     sh "${mvnCmd} -P release clean deploy -DskipTests=true -Dpackaging=jar -DrepositoryId=nexus -DaltDeploymentRepository=nexus::default::http://nexus3:8081/repository/maven-releases"
   }
  
      
   stage('Build OpenShift Image') {
    sh "oc project my-dev-project"
    def GET_BUILD_OUTPUT = sh (
       script: "oc get all -l build=ose-wall-service -n my-dev-project 2>&1",
      returnStdout: true
    ).trim()
  
    echo "Get build output: ${GET_BUILD_OUTPUT}"
    
    if (GET_BUILD_OUTPUT.contains("No resources found.")){
      sh "oc new-build --binary=true --name=ose-wall-service -i=redhat-openjdk18-openshift -n my-dev-project"
    }
    sh "curl -O http://nexus3:8081/repository/maven-releases/org/savolainen/ose-wall-service/${artifactVersion}/ose-wall-service-${artifactVersion}.jar"
    sh "oc start-build ose-wall-service --from-file=./ose-wall-service-${artifactVersion}.jar -n my-dev-project"
    openshiftVerifyBuild bldCfg: 'ose-wall-service', checkForTriggeredDeployments: 'false', namespace: 'my-dev-project', verbose: 'false', waitTime: ''
    sh "oc tag my-dev-project/ose-wall-service:latest my-dev-project/ose-wall-service:${artifactVersion} -n my-dev-project"
   }


   stage ('Deploy DEV') {
    sh "oc project my-dev-project"

    def GET_DC_OUTPUT = sh (
       script: "oc get dc/ose-wall-service -n my-dev-project 2>&1",
       returnStatus: true
     ) == 0

    if (!GET_DC_OUTPUT){
      sh "oc new-app my-dev-project/ose-wall-service:${artifactVersion} -n my-dev-project -e OPENSHIFT_MYSQL_DB_HOST=mysql -e OPENSHIFT_MYSQL_DB_PORT=3306 -e OPENSHIFT_MYSQL_DB_USERNAME=mysli -e OPENSHIFT_MYSQL_DB_PASSWORD=mysli"
      openshiftVerifyService apiURL: '', namespace: 'my-dev-project', svcName: 'ose-wall-service', verbose: 'false'
      sh "oc set probe dc/ose-wall-service --readiness --failure-threshold 3 --initial-delay-seconds 30 --open-tcp=8080 -n my-dev-project"
      sh "oc set probe dc/ose-wall-service --liveness --failure-threshold 3 --initial-delay-seconds 30 --open-tcp=8080 --timeout-seconds=10 -n my-dev-project"
    } else {

     sh "oc patch dc ose-wall-service -n 'my-dev-project' -p '{\"spec\": {\"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"ose-wall-service\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"my-dev-project\", \"name\": \"ose-wall-service:${artifactVersion}\"}}}]}}'"
     openshiftDeploy apiURL: '', authToken: '', depCfg: 'ose-wall-service', namespace: 'my-dev-project', verbose: 'false', waitTime: '', waitUnit: 'sec'

    }  
    openshiftVerifyDeployment depCfg: 'ose-wall-service', namespace: 'my-dev-project', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
  
   }
 
  
  stage('Integration Test') {
    applicationHostName = sh (
      script: "oc get route ose-wall-router-ui -o template --template '{{ .spec.host }}' -n my-dev-project",
      returnStdout: true
    )
    GET_HTTP_RESPCODE = sh (
       script: "curl -s -o /dev/null -w '%{http_code}' http://${applicationHostName}/messages",
       returnStdout: true
    ) == "200"
  
    sh "oc tag my-dev-project/ose-wall-service:${artifactVersion} my-prod-project/ose-wall-service:prod-${artifactVersion} -n my-dev-project"
  }

  // Blue/Green Deployment into Production
  // -------------------------------------
  def dest = ""

  def currentDeployment = sh (
    script: "oc get route tasks -n hs-tasks-prod -o jsonpath='{ .spec.to.name }'",
    returnStdout: true
  )
  
  stage('Prep Production Deployment') {
    dest = (currentDeployment == 'hs-tasks-green') ? 'hs-tasks-blue' : 'hs-tasks-green'
    echo "Active svc: " + currentDeployment
    echo "Dest svc:   " + dest
  }

  stage('Deploy new Version') {
    echo "Deploying to ${dest}"

    // Patch the DeploymentConfig so that it points to the latest ProdReady-${version} Image:
    sh "oc patch dc ${dest} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"$dest\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"hs-tasks-dev\", \"name\": \"tasks:ProductionReady-$version\"}}}]}}' -n hs-tasks-prod"

    openshiftDeploy depCfg: dest, namespace: 'hs-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: dest, namespace: 'hs-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'hs-tasks-prod', svcName: dest, verbose: 'false'
  }
  
  stage('Switch over to new Version') {
    input "Switch Production from $currentDeployment to $dest?"
    sh 'oc patch route tasks -n hs-tasks-prod -p \'{"spec":{"to":{"name":"' + dest + '"}}}\''
    sh 'oc get route tasks -n hs-tasks-prod > oc_out.txt'
    oc_out = readFile('oc_out.txt')
    echo "Current route configuration: " + oc_out
  }
 
 
 
 
 
 
   stage ('Deploy QA') {
     timeout(time:5, unit:'MINUTES') {
       input message: "Promote to QA?", ok: "Promote"
     }
     //sh "oc tag my-dev-projct/ose-wall-service:latest my-qa-projct/ose-wall-service:${artifactVersion}"
 
   }

}

//node('nodejs') {
//  sh "ls" 
//}

// Convenience Functions to read variables from the pom.xml
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
